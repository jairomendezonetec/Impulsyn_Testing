{"version":3,"sources":["./src/app/signup-flow/verification-code/verification-code.page.html","./src/app/base/profile-image-editor-base.page.ts","./src/app/signup-flow/verification-code/verification-code-routing.module.ts","./src/app/signup-flow/verification-code/verification-code.module.ts","./src/app/signup-flow/verification-code/verification-code.page.scss","./src/app/signup-flow/verification-code/verification-code.page.ts"],"names":[],"mappings":"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","file":"signup-flow-verification-code-verification-code-module.js","sourcesContent":["export default \"<app-header [showBackButton]=\\\"showBackButton\\\" [titleImage]=\\\"logoPath\\\" (backButtonClick)=\\\"goBack()\\\"></app-header>\\n\\n<ion-content class=\\\"ion-padding background-with-dark-color\\\">\\n  <ion-grid class=\\\"flex-container\\\">\\n    <form [formGroup]=\\\"formGroup\\\">\\n      <ion-row class=\\\"flex-item\\\">\\n        <ion-col size=\\\"12\\\" class=\\\"ion-text-center\\\">\\n          <div class=\\\"screen-extrabig-title\\\" [innerHTML]=\\\"'verificationCode.title' | translate\\\"></div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row class=\\\"flex-item ion-padding-vertical ion-margin-vertical\\\">\\n        <ion-col size=\\\"12\\\" class=\\\"ion-text-center\\\" *ngIf=\\\"codeText\\\">\\n          <span class=\\\"small-size ion-text-center ion-margin-top\\\">{{ codeText }}</span>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row class=\\\"flex-item ion-justify-content-center ion-margin-vertical ion-padding-bottom\\\">\\n        <div class=\\\"pr col-xs-10 col-sm-8 col-lg-6\\\">\\n          <ion-item lines=\\\"full\\\" class=\\\"ion-margin-vertical input-background\\\">\\n            <ion-label appPlatformMode>{{'formFields.verificationCode' | translate}}</ion-label>\\n            <ion-input type=\\\"text\\\" inputmode=\\\"numeric\\\" formControlName=\\\"code\\\" required></ion-input>\\n          </ion-item>\\n          <app-show-errors [control]=\\\"formGroup.controls['code']\\\"></app-show-errors>\\n        </div>\\n        <div class=\\\"pr col-xs-10 col-sm-8 col-lg-6 ion-text-end\\\">\\n          <a color=\\\"white\\\" class=\\\"small-size ion-text-end underline\\\" data-test=\\\"resend-code-link\\\" (click)=\\\"resendCode()\\\"\\n            >{{ 'formFields.resendCode' |translate}}</a\\n          >\\n        </div>\\n      </ion-row>\\n      <app-action-button\\n        (actionButtonClick)=\\\"sendVerificationCode()\\\"\\n        [buttonText]=\\\"'verificationCode.button'\\\"\\n      ></app-action-button>\\n    </form>\\n  </ion-grid>\\n</ion-content>\\n\";","import { Location } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { SafeUrl } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Camera } from '@ionic-native/camera/ngx';\n\nimport { UtilsService } from '../@core/utils.service';\nimport { BasePage } from './base.page';\nimport { Utils } from '../@global/utils';\nimport { InformService } from '../@core/inform.service';\n\nexport class ProfileImageEditorBasePage extends BasePage {\n  public profileImage: SafeUrl;\n  public imageOriginalPath: string;\n\n  constructor(\n    location: Location,\n    router: Router,\n    store: Store,\n    utilsService: UtilsService,\n    protected camera: Camera,\n    protected informService: InformService\n  ) {\n    super(location, router, store, utilsService);\n  }\n\n  protected pickImageGallery = () => {\n    this.pickImage(this.camera.PictureSourceType.PHOTOLIBRARY);\n  };\n\n  protected pickImageCamera = () => {\n    this.pickImage(this.camera.PictureSourceType.CAMERA);\n  };\n\n  protected async pickImage(sourceType: number): Promise<void> {\n    try {\n      const imageData = await this.utilsService.getMediaFromCameraPlugin(sourceType, this.camera.MediaType.PICTURE);\n\n      const { path, filename } = Utils.getPathAndFilenameFromUrl(imageData.imageOriginalPath);\n      const file = await this.utilsService.getFileFromSystemPath(path, filename);\n\n      if (!Utils.isImageMediaType(file.type)) {\n        this.informService.showWarning('createPost.wrongImageType');\n        return;\n      }\n\n      this.imageOriginalPath = imageData.imageOriginalPath;\n      this.profileImage = imageData.imageSource;\n    } catch (error) {\n      console.error('[ProfileImageEditorBasePage pickImage] error taking a picture');\n      console.error(error);\n\n      const capturedError = new Error('Error in pickImage: ' + error);\n      capturedError.name = '[ProfileImageEditorBasePage error]';\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { VerificationCodePage } from './verification-code.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VerificationCodePage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VerificationCodePageRoutingModule {}\n","import { NgModule } from '@angular/core';\n\nimport { VerificationCodePageRoutingModule } from './verification-code-routing.module';\n\nimport { VerificationCodePage } from './verification-code.page';\nimport { SharedModule } from '../../@shared/shared.module';\n\n@NgModule({\n  imports: [SharedModule, VerificationCodePageRoutingModule],\n  declarations: [VerificationCodePage],\n})\nexport class VerificationCodePageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NpZ251cC1mbG93L3ZlcmlmaWNhdGlvbi1jb2RlL3ZlcmlmaWNhdGlvbi1jb2RlLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Store } from '@ngxs/store';\nimport { StorageService } from '../../@core/storage.service';\nimport { ConfirmSignUp, ResendVerificationCode } from '../../@store/auth/auth.actions';\nimport { take } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormCustomValidators } from '../../@shared/validators/form-custom-validators';\nimport { CredentialsModel } from '../../login/model/credentials';\nimport { NavigationExtrasService } from '../../@core/navigation-extras.service';\nimport { UtilsService } from '../../@core/utils.service';\nimport { InformService } from '../../@core/inform.service';\nimport { SignupBasePage } from '../signup-base.page';\nimport { AWSErrorType } from '../../@core/errors/aws-error';\nimport { GoogleAnalyticsService } from '../../@core/google-analytics.service';\nimport { GlobalInfoState } from '../../@store/global-info/global-info.state';\nimport { Constants } from 'src/app/@global/constants';\nimport { Camera } from '@ionic-native/camera/ngx';\n\nconst PAGE_POSITION = 1;\n\n@Component({\n  selector: 'app-verification-code',\n  templateUrl: './verification-code.page.html',\n  styleUrls: ['./verification-code.page.scss'],\n})\nexport class VerificationCodePage extends SignupBasePage implements OnInit {\n  public formGroup: FormGroup;\n  public codeText: string;\n  private userCredentials: CredentialsModel;\n  private specialCase = false;\n\n  constructor(\n    location: Location,\n    router: Router,\n    store: Store,\n    utilsService: UtilsService,\n    camera: Camera,\n    informService: InformService,\n    storage: StorageService,\n    navigationExtrasService: NavigationExtrasService,\n    googleAnalyticsService: GoogleAnalyticsService,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService\n  ) {\n    super(\n      location,\n      router,\n      store,\n      utilsService,\n      camera,\n      informService,\n      storage,\n      navigationExtrasService,\n      googleAnalyticsService\n    );\n  }\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  private initForm(): void {\n    this.formGroup = this.formBuilder.group({\n      code: ['', [Validators.required, FormCustomValidators.validateVerificationCode]],\n    });\n  }\n\n  async ionViewDidEnter() {\n    this.specialCase = this.getNavigationExtrasField('fromLogin');\n\n    if (this.specialCase) {\n      this.userCredentials = new CredentialsModel(\n        this.getNavigationExtrasField('username'),\n        this.getNavigationExtrasField('password')\n      );\n    } else {\n      this.userCredentials = await this.storage.getCredentials();\n\n      // If there is no data in storage to send to register the user, go back first step\n      if (this.userCredentials === null) {\n        this.router.navigate(['/signup']);\n      }\n    }\n\n    this.codeText = await this.translateService\n      .get('verificationCode.codeText', { email: this.userCredentials.email })\n      .toPromise();\n  }\n\n  private getNavigationExtrasField(field: string): any {\n    if (this.navigationExtrasService.getExtras() && this.navigationExtrasService.getExtras()[field]) {\n      return this.navigationExtrasService.getExtras()[field];\n    }\n\n    return '';\n  }\n\n  sendVerificationCode() {\n    if (this.utilsService.isValidForm(this.formGroup, 'formValidations.checkCode')) {\n      this.store\n        .dispatch(\n          new ConfirmSignUp({\n            username: this.userCredentials.email,\n            code: this.formGroup.get('code').value,\n          })\n        )\n        .pipe(take(1))\n        .subscribe(\n          () => {\n            this.utilsService\n              .logIn({ username: this.userCredentials.email, password: this.userCredentials.password }, true)\n              .pipe(take(1))\n              .subscribe(\n                async () => {\n                  if (this.store.selectSnapshot(GlobalInfoState.getVersionInfo).user_needs_accept_app) {\n                    this.router.navigate([Constants.DOWNLOAD_NEW_VERSION_PAGE]);\n                    return;\n                  }\n\n                  // set form data in local storage\n                  await this.updateLastPage(PAGE_POSITION);\n                  this.nextPage();\n                },\n                (error) => {\n                  console.log(error);\n                }\n              );\n          },\n          (error) => {\n            if (\n              error.code === AWSErrorType.NotAuthorizedException &&\n              error.message.includes('Current status is CONFIRMED')\n            ) {\n              this.nextPage();\n            }\n          }\n        );\n    }\n  }\n\n  private nextPage() {\n    // user should not be able to go back to verification code page\n    this.navigationExtrasService.setExtras({ showGoBack: false });\n    // go next page\n    this.goNextFlowPage(PAGE_POSITION, true);\n  }\n\n  public resendCode(): void {\n    this.store\n      .dispatch(\n        new ResendVerificationCode({\n          username: this.userCredentials.email,\n        })\n      )\n      .pipe(take(1))\n      .subscribe(\n        () => {\n          this.informService.showInfo('formValidations.resendCodeSuccess');\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  }\n}\n"],"sourceRoot":"webpack:///"}