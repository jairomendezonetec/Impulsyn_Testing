{"version":3,"sources":["./src/app/@shared/components/location/location.component.html","./src/app/@shared/components/location/location.component.scss","./src/app/@shared/components/location/location.component.ts","./src/app/@shared/components/location/location.module.ts"],"names":[],"mappings":"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","file":"default~select-location-select-location-module~select-program-location-select-program-location-modul~a9b70ea9.js","sourcesContent":["export default \"<form [formGroup]=\\\"formGroup\\\">\\n  <ion-row class=\\\"flex-item ion-align-items-center w100 ion-justify-content-center\\\">\\n    <div class=\\\"pr col-xs-10 col-sm-6 col-lg-6 ion-text-center flex-container-vertical\\\" *ngIf=\\\"countryList?.length > 0\\\">\\n      <ion-item lines=\\\"full\\\" class=\\\"ion-margin-bottom ion-margin-top input-background\\\">\\n        <ion-label appPlatformMode>{{ 'formFields.country' | translate }}</ion-label>\\n        <ion-select\\n          interface=\\\"action-sheet\\\"\\n          formControlName=\\\"countryCode\\\"\\n          (ionChange)=\\\"getRegionsOfCountry()\\\"\\n          class=\\\"custom-alert\\\"\\n          [interfaceOptions]=\\\"customActionSheetOptionsCountry\\\"\\n          okText=\\\"{{ 'buttons.accept' | translate }}\\\"\\n          cancelText=\\\"{{ 'buttons.cancel' | translate }}\\\"\\n        >\\n          <ion-select-option [value]=\\\"defaultOption.value\\\">{{ defaultOption.name | translate }}</ion-select-option>\\n          <ion-select-option\\n            *ngFor=\\\"let countryOption of countryList | sortBy: 'asc':'name'\\\"\\n            [value]=\\\"countryOption.value\\\"\\n          >\\n            {{ countryOption.name | translate }}</ion-select-option\\n          >\\n        </ion-select>\\n      </ion-item>\\n      <app-show-errors [control]=\\\"formGroup.controls['countryCode']\\\"></app-show-errors>\\n    </div>\\n  </ion-row>\\n  <ion-row class=\\\"flex-item ion-align-items-center w100 ion-justify-content-center\\\">\\n    <div class=\\\"pr col-xs-10 col-sm-6 col-lg-6 ion-text-center flex-container-vertical\\\" *ngIf=\\\"regionsOfCountry\\\">\\n      <ion-item lines=\\\"full\\\" class=\\\"ion-margin-bottom ion-margin-top input-background\\\">\\n        <ion-label appPlatformMode>{{ 'formFields.region' | translate }}</ion-label>\\n        <ion-select\\n          (ionChange)=\\\"getProvinces()\\\"\\n          [formControlName]=\\\"'region'\\\"\\n          class=\\\"custom-alert\\\"\\n          interface=\\\"action-sheet\\\"\\n          [interfaceOptions]=\\\"customActionSheetOptionsRegion\\\"\\n          [selectedText]=\\\"formGroup.get('region').value\\\"\\n          okText=\\\"{{ 'buttons.accept' | translate }}\\\"\\n          cancelText=\\\"{{ 'buttons.cancel' | translate }}\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let region of regions | sortBy: 'asc':'name'\\\" [value]=\\\"region.name\\\">\\n            {{ region.name | translate }}</ion-select-option\\n          >\\n        </ion-select>\\n      </ion-item>\\n      <app-show-errors [control]=\\\"formGroup.controls['region']\\\"></app-show-errors>\\n    </div>\\n  </ion-row>\\n  <ion-row class=\\\"flex-item ion-align-items-center w100 ion-justify-content-center\\\">\\n    <div\\n      class=\\\"pr col-xs-10 col-sm-6 col-lg-6 ion-text-center flex-container-vertical\\\"\\n      *ngIf=\\\"regionsOfCountry && provinces?.length > 1\\\"\\n    >\\n      <ion-item lines=\\\"full\\\" class=\\\"ion-margin-bottom ion-margin-top input-background\\\">\\n        <ion-label appPlatformMode>{{ 'formFields.province' | translate }}</ion-label>\\n        <ion-select\\n          [formControlName]=\\\"'province'\\\"\\n          class=\\\"custom-alert\\\"\\n          [interfaceOptions]=\\\"customActionSheetOptionsProvince\\\"\\n          interface=\\\"action-sheet\\\"\\n          okText=\\\"{{ 'buttons.accept' | translate }}\\\"\\n          cancelText=\\\"{{ 'buttons.cancel' | translate }}\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let province of provinces | sortBy: 'asc':'name'\\\" [value]=\\\"province.name\\\">\\n            {{ province.name }}</ion-select-option\\n          >\\n        </ion-select>\\n      </ion-item>\\n      <app-show-errors [control]=\\\"formGroup.controls['province']\\\"></app-show-errors>\\n    </div>\\n  </ion-row>\\n  <ion-row class=\\\"flex-item ion-align-items-center w100 ion-justify-content-center\\\">\\n    <div class=\\\"pr col-xs-10 col-sm-6 col-lg-6 ion-text-center flex-container-vertical\\\" *ngIf=\\\"regionsOfCountry\\\">\\n      <ion-item lines=\\\"full\\\" class=\\\"ion-margin-bottom ion-margin-top input-background\\\">\\n        <ion-label appPlatformMode>{{ 'formFields.city' | translate }}</ion-label>\\n        <ion-input type=\\\"text'\\\" [formControlName]=\\\"'city'\\\"></ion-input>\\n      </ion-item>\\n      <app-show-errors [control]=\\\"formGroup.controls['city']\\\"></app-show-errors>\\n    </div>\\n  </ion-row>\\n  <ion-row class=\\\"flex-item ion-align-items-center w100 ion-justify-content-center\\\">\\n    <div class=\\\"pr col-xs-10 col-sm-6 col-lg-6 ion-text-center flex-container-vertical\\\" *ngIf=\\\"!regionsOfCountry\\\">\\n      <ion-item lines=\\\"full\\\" class=\\\"ion-margin-bottom ion-margin-top input-background\\\">\\n        <ion-label appPlatformMode>{{ 'formFields.region' | translate }}</ion-label>\\n        <ion-input type=\\\"text'\\\" [formControlName]=\\\"'region'\\\"></ion-input>\\n      </ion-item>\\n      <app-show-errors [control]=\\\"formGroup.controls['region']\\\"></app-show-errors>\\n    </div>\\n  </ion-row>\\n</form>\\n<ion-row class=\\\"ion-padding-vertical ion-margin-vertical\\\"></ion-row>\\n<app-action-button (actionButtonClick)=\\\"buttonClick()\\\" [buttonText]=\\\"buttonText\\\"></app-action-button>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0BzaGFyZWQvY29tcG9uZW50cy9sb2NhdGlvbi9sb2NhdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IElement, IRegion } from '../../../@store/global-info/global-info.model';\nimport { NativeGeocoderResult } from '@ionic-native/native-geocoder/ngx';\nimport { GetLocationInfo } from '../../../@store/global-info/global-info.actions';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { GlobalInfoState } from '../../../@store/global-info/global-info.state';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Constants } from '../../../@global/constants';\nimport { UtilsService } from '../../../@core/utils.service';\nimport { find } from 'lodash';\n\nconst SPECIAL_CASE = 'es';\n\n@Component({\n  selector: 'app-device-location',\n  templateUrl: './location.component.html',\n  styleUrls: ['./location.component.scss'],\n})\nexport class LocationComponent implements OnInit, OnDestroy, OnChanges {\n  @Input() buttonText: string;\n  @Input() deviceLocation: NativeGeocoderResult;\n  @Output() actionButtonClick = new EventEmitter<any>();\n  @Select(GlobalInfoState.getCountries) countries$: Observable<IElement[]>;\n\n  private countriesSubscription$: Subscription;\n\n  public formGroup: FormGroup;\n  public countryList: any[];\n  public regionsOfCountry = false;\n  public isSpain = false;\n  public regions: IRegion[];\n  public provinces: IElement[];\n  public customActionSheetOptionsCountry: any;\n  public customActionSheetOptionsRegion: any;\n  public customActionSheetOptionsProvince: any;\n  public labelCountry: string;\n  public labelRegion: string;\n  public labelProvince: string;\n  public defaultOption = {\n    name: 'Spain',\n    value: 'es',\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private store: Store,\n    private translate: TranslateService,\n    private utilsService: UtilsService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['deviceLocation']?.currentValue) {\n      const deviceLocationValue = changes['deviceLocation'].currentValue;\n      const countryCode = deviceLocationValue.countryCode?.toLowerCase();\n      // set country\n      this.formGroup.get('countryCode').setValue(countryCode);\n      this.formGroup.get('city').setValue(deviceLocationValue.locality);\n      this.getRegions(countryCode);\n    }\n  }\n\n  ngOnInit() {\n    // override showBackButton\n    this.loadLocalCountriesInfo();\n    this.initForm();\n    this.labelCountry = this.translate.instant(`formFields.country`);\n    this.labelRegion = this.translate.instant(`formFields.region`);\n    this.labelProvince = this.translate.instant(`formFields.province`);\n\n    this.customActionSheetOptionsCountry = {\n      header: this.labelCountry,\n      translucent: true,\n    };\n    this.customActionSheetOptionsRegion = {\n      header: this.labelRegion,\n      translucent: true,\n    };\n    this.customActionSheetOptionsProvince = {\n      header: this.labelProvince,\n      translucent: true,\n    };\n  }\n\n  private initForm(): void {\n    this.formGroup = this.formBuilder.group({\n      countryCode: ['', [Validators.required]],\n      region: ['', [Validators.required]],\n      province: '',\n      city: [''],\n    });\n  }\n\n  public getRegionsOfCountry() {\n    this.resetSubLevels();\n    const countryCode = this.formGroup.get('countryCode').value;\n    this.isSpain = countryCode === SPECIAL_CASE;\n    this.getRegions(countryCode);\n  }\n\n  private resetSubLevels() {\n    this.resetProvinces();\n    this.resetRegion();\n    this.formGroup.get('city').setValue('');\n  }\n\n  private resetRegion() {\n    this.formGroup.get('region').reset();\n    this.formGroup.get('region').setValue('', { emitEvent: false });\n  }\n\n  private getRegions(countryCode: string) {\n    if (this.isCountryWithRegions(countryCode)) {\n      this.regionsOfCountry = true;\n      const foundRegions = this.getCountry(countryCode);\n      if (foundRegions?.regions?.length > 0) {\n        this.regions = foundRegions.regions;\n        // this.formGroup.get('region').setValue(this.regions[0].name, { emitEvent: false });\n        if (this.deviceLocation) {\n          console.dir(this.deviceLocation);\n          this.searchRegionInLocalFile(this.deviceLocation.administrativeArea);\n        } else {\n          this.getProvinces();\n        }\n      }\n    } else {\n      this.resetRegion();\n      this.regionsOfCountry = false;\n    }\n  }\n\n  private resetProvinces() {\n    this.provinces = [];\n    this.formGroup.get('province').reset();\n    this.formGroup.get('province').clearValidators();\n    this.formGroup.get('province').updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    this.formGroup.get('province').disable();\n  }\n\n  public getProvinces() {\n    if (!this.isSpain) {\n      this.resetProvinces();\n    } else {\n      if (this.formGroup.get('region').value) {\n        const regionSelected = this.formGroup.get('region').value;\n        const regionFounded = this.getRegion(regionSelected);\n        // const regionFounded = this.searchElementList(this.regions, this.formGroup.get('region').value);\n        if (regionFounded) {\n          this.provinces = regionFounded.provinces;\n          this.selectUniqueProvince(regionFounded);\n          this.formGroup.get('province').enable();\n          if (this.provinces.length > 1) {\n            this.formGroup.get('province').reset();\n            this.formGroup.get('province').setValidators([Validators.required]);\n            this.formGroup.get('province').updateValueAndValidity({ onlySelf: true, emitEvent: false });\n          }\n        }\n      }\n    }\n  }\n\n  private searchRegionInLocalFile(regionNameSelected: string) {\n    if (regionNameSelected) {\n      const regionFounded = this.getRegion(regionNameSelected);\n\n      if (regionFounded) {\n        // region founded\n        this.formGroup.get('region').setValue(regionFounded.name, { emitEvent: false });\n\n        if (this.isSpain) {\n          // show provinces\n          this.provinces = regionFounded.provinces;\n\n          this.selectUniqueProvince(regionFounded);\n\n          if (this.deviceLocation?.subAdministrativeArea) {\n            const selectedProvince = find(this.provinces, { name: this.deviceLocation.subAdministrativeArea });\n\n            if (selectedProvince) {\n              this.formGroup.get('province').setValue(selectedProvince.name);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private isCountryWithRegions(country: string): boolean {\n    return Constants.COUNTRIES_REGION_LIST.indexOf(country?.toLowerCase()) !== -1;\n  }\n\n  private selectUniqueProvince(region: IRegion) {\n    if (region.provinces.length === 1) {\n      this.formGroup.get('province').setValue(region.provinces[0].name);\n    }\n  }\n\n  private loadLocalCountriesInfo(): void {\n    this.store.dispatch(new GetLocationInfo());\n    this.countriesSubscription$ = this.countries$.subscribe((data) => {\n      this.countryList = data;\n    });\n  }\n\n  private disconnectObservers(): void {\n    try {\n      this.countriesSubscription$.unsubscribe();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.disconnectObservers();\n  }\n\n  public async buttonClick() {\n    if (this.utilsService.isValidForm(this.formGroup)) {\n      const countrySelected = this.formGroup.get('countryCode').value;\n      const regionSelected = this.formGroup.get('region').value;\n      const provinceSelected = this.formGroup.get('province').value;\n\n      const resultObject = {\n        country: { id: this.getCountry(countrySelected)?.id, name: this.getCountry(countrySelected)?.name },\n        city: this.formGroup.get('city').value,\n      };\n      if (this.isCountryWithRegions(countrySelected)) {\n        resultObject['region'] = { id: this.getRegion(regionSelected)?.id, name: this.getRegion(regionSelected)?.name };\n        if (this.isSpain) {\n          resultObject['province'] = {\n            id: this.getProvince(provinceSelected)?.id,\n            name: this.getProvince(provinceSelected)?.name,\n          };\n        }\n      } else {\n        resultObject['region_name'] = regionSelected;\n      }\n      this.actionButtonClick.emit(resultObject);\n    }\n  }\n\n  private getCountry(countryCode) {\n    return find(this.countryList, { value: countryCode });\n  }\n\n  private getRegion(regionNameSelected) {\n    return find(this.regions, { name: regionNameSelected });\n  }\n\n  private getProvince(provinceName) {\n    return find(this.provinces, { name: provinceName });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared.module';\nimport { LocationComponent } from './location.component';\n\n@NgModule({\n  declarations: [LocationComponent],\n  imports: [SharedModule],\n  exports: [LocationComponent],\n})\nexport class LocationModule {}\n"],"sourceRoot":"webpack:///"}